package com.tonyakitori.apps.tourcomposedemo.tabs.basicdemo

import com.tonyakitori.apps.tourcompose.controller.TourComposeController
import com.tonyakitori.apps.tourcompose.controller.TourComposeStep
import com.tonyakitori.apps.tourcompose.settings.bubbleContent.bubbleContentBasicSettings
import com.tonyakitori.apps.tourcompose.settings.colors.BubbleContentColors
import java.util.UUID

/**
 * Specific controller for basic TourCompose demo.
 * Handles tours using basic components without specific design system dependencies.
 *
 * Note: Tour step texts are kept in Spanish as a tribute to the native language of the developer.
 */
class BasicDemoController(
    private val customColors: BubbleContentColors? = null
) : TourComposeController() {

    init {
        addTour(
            flowId = BASIC_DEMO_FLOW,
            steps = createBasicDemoSteps()
        )
    }

    private fun createBasicDemoSteps(): List<TourComposeStep> = listOf(
        TourComposeStep(
            id = BasicDemoSteps.IMAGE.id.toString(),
            bubbleContentSettings = bubbleContentBasicSettings(
                title = "üñºÔ∏è Imagen B√°sica",
                description = "Esta es una demostraci√≥n de TourCompose b√°sico sin dependencias de Material3. Usa colores simples y componentes agn√≥sticos.",
                primaryButtonText = "Siguiente",
                secondaryButtonText = null,
                colors = customColors,
                onPrimaryClick = { nextStep() },
                onDismiss = { stopTour() }
            )
        ),
        TourComposeStep(
            id = BasicDemoSteps.BUTTON.id.toString(),
            bubbleContentSettings = bubbleContentBasicSettings(
                title = "üîò Bot√≥n de Inicio",
                description = "Este bot√≥n inicia el tour b√°sico. Observa c√≥mo los colores son simples y no dependen de ning√∫n tema espec√≠fico.",
                primaryButtonText = "Siguiente",
                secondaryButtonText = "Anterior",
                colors = customColors,
                onPrimaryClick = { nextStep() },
                onSecondaryClick = { previousStep() },
                onDismiss = { stopTour() }
            )
        ),
        TourComposeStep(
            id = BasicDemoSteps.TEXT_FIELD.id.toString(),
            bubbleContentSettings = bubbleContentBasicSettings(
                title = "üìù Campo de Texto",
                description = "Los campos de texto funcionan perfectamente con TourCompose b√°sico. La librer√≠a es completamente agn√≥stica al sistema de dise√±o.",
                primaryButtonText = "Siguiente",
                secondaryButtonText = "Anterior",
                colors = customColors,
                onPrimaryClick = { nextStep() },
                onSecondaryClick = { previousStep() },
                onDismiss = { stopTour() }
            )
        ),
        TourComposeStep(
            id = BasicDemoSteps.SWITCH.id.toString(),
            bubbleContentSettings = bubbleContentBasicSettings(
                title = "üîÑ Switch Final",
                description = "Este es el √∫ltimo paso del tour b√°sico. TourCompose b√°sico es perfecto para proyectos que no usan Material3 o quieren m√°ximo control sobre los estilos.",
                primaryButtonText = "Finalizar",
                secondaryButtonText = "Anterior",
                colors = customColors,
                onPrimaryClick = { stopTour() },
                onSecondaryClick = { previousStep() },
                onDismiss = { stopTour() }
            )
        )
    )

    companion object {
        const val BASIC_DEMO_FLOW = "basic_demo_flow"
    }
}

enum class BasicDemoSteps(val id: UUID, val stepIndex: Int) {
    IMAGE(UUID.randomUUID(), 0),
    BUTTON(UUID.randomUUID(), 1),
    TEXT_FIELD(UUID.randomUUID(), 2),
    SWITCH(UUID.randomUUID(), 3)
}